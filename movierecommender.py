# -*- coding: utf-8 -*-
"""Copy of MovieRecommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dbzA5Z7lgMfnrSiizPsSl-NV3WdRbfsP

Movie Recommeneder System

Imported the required libraries for performing the task such as importing and storing of files. Pandas and numpy helps us to present the parameter of the files and to set the files so that the further operation can be performed
"""

import pandas as pd
import numpy as np

column_names = ['user_id','item_id','ratings','timestamp']
df = pd.read_csv("/content/u (2).data", sep = "\t", names = column_names)

"""We have created a data frame which contain the value of the movie files and the values are user_id, item_id, ratings of the movie, their timestamp."""

df.head()

"""Created another data frame which will contain csv file storing the name of the movies

"""

df2 = pd.read_csv("/content/Movie_Id_Titles [MConverter.eu].csv")
df2.head()

"""Merged both the data frame df & df2 with respect to their item_id and store their value in the new data frame (df3)"""

df3 = pd.merge(df,df2, on="item_id")
df3.head()

"""EDA (Estimated Data Analysis) is a crucial step in data exploration, involving techniques like visualization, summary statistics, and hypothesis testing to understand data characteristics, identify patterns, and detect anomalies. It helps in making informed decisions and guiding further analysis in fields such as statistics, machine learning, and data science.

We have imported the libraries such as matplotlib, seaborn for the visualization of the data
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style("white")
# %matplotlib inline

"""We will create a rating dataframe with Average rating and number of ratings"""

df3.groupby('title')['ratings'].mean().sort_values(ascending=False).head()

"""Titles with their ratings in descending order"""

df3.groupby('title')['ratings'].count().sort_values(ascending=False).head()

"""A new data frame named "ratings" which will contain the title of the movie and their average ratings"""

ratings = pd.DataFrame(df3.groupby('title')['ratings'].mean())
ratings.head()

"""Now we will add the new column in the ratings data frame named as 'num of rating' which will contain the number of ratings"""

ratings['num of ratings'] = pd.DataFrame(df3.groupby('title')['ratings'].count())
ratings.head()

"""Now a few Histogram

Histogram visuals of the rating dataframe with refrence to the num of rating
"""

plt.figure(figsize=(10,4))
ratings['num of ratings'].hist(bins=70)

plt.figure(figsize=(10,4))
ratings['ratings'].hist(bins=70)

sns.jointplot(x = 'ratings', y ='num of ratings', data=ratings, alpha =0.7)

"""Okay! Now that we have a general idea of what the data looks like, let's move on to creating a simple recommendation system:

**Recommending Similar Movies**
Now let's create a matrix that has the user ids on one access and the movie title on another axis. Each cell will then consist of the rating the user gave to that movie. Note there will be a lot of NaN values, because most people have not seen most of the movies.

Will create a pivot table of df3 data frame
"""

moviemat = df3.pivot_table(index="user_id", columns = "title", values ="ratings")
moviemat.head()

"""Sort the values of 'num of ratings' in descending order"""

ratings.sort_values('num of ratings',ascending = False).head(10)

"""Now we will select any two movie out of these"""

star_wars_user_ratings = moviemat['Star Wars (1977)']
Scream_user_ratings = moviemat['Scream (1996)']
star_wars_user_ratings.head()

Scream_user_ratings.head()

"""We can then use corrwith() method to get correlations between two pandas series:"""

similiar_to_star_wars = moviemat.corrwith(star_wars_user_ratings)
similiar_to_Scream = moviemat.corrwith(Scream_user_ratings)

"""Movies related to the star wars is store in the data frame corr_starwar which will contain the titles of those movies and their correlation values"""

corr_starwar = pd.DataFrame(similiar_to_star_wars, columns = ['correlation'])
corr_starwar.dropna(inplace = True)
corr_starwar.head()

"""sorting the values of corr_starwar in descending order"""

corr_starwar.sort_values("correlation", ascending = False).head(10)

"""Now, we will join the column num of ratings"""

corr_starwar = corr_starwar.join(ratings['num of ratings'])
corr_starwar.head()

"""So these are the movies which should be recommended after you watch Star Wars."""

corr_starwar[corr_starwar['num of ratings']>100].sort_values('correlation',ascending = False,).head()

"""Now the movie that you should watch after watching Scream is"""

corr_scream = pd.DataFrame(similiar_to_Scream, columns=["correlation"])
corr_scream.dropna()
corr_scream.head()

corr_scream = corr_scream.sort_values('correlation', ascending = False).head()
corr_scream.head()

corr_scream = corr_scream.join(ratings['num of ratings'])
corr_scream.head()

corr_scream[corr_scream['num of ratings']>0].sort_values('correlation', ascending = False,).head()